logit <- glm(class~cap_shape+cap_surface+bruises+gill_attachment+gill_spacing+stalk_shape+stalk_surface_above_ring
             +stalk_surface_below_ring+habitat,data=train,family=binomial(link = "logit"))
summary(logit)
selection = stepAIC(logit, k=log(nrow(train)))

# recherche maximale
selection <- step(logit,direction="forward",trace=TRUE,k = log(nrow(train)))
selection
summary(selection)

# application du modèle à un jeu de données
train.ascbic <- predict(selection, newdata=train, type="response")
valid.ascbic <- predict(selection, newdata=valid, type="response")

# aire sous la courbe ROC
library(ROCR)
pred <- prediction(train.ascbic,train$class,label.ordering=c(0,1))
performance(pred,"auc")@y.values[[1]]
pred <- prediction(valid.ascbic,valid$class,label.ordering=c(0,1))
performance(pred,"auc")@y.values[[1]]

# application du modèle à un jeu de données
valid$logit <- predict(logit, newdata=valid, type="response")

# aire sous la courbe ROC
library(ROCR)
pred <- prediction(valid$logit,valid$class,label.ordering=c(0,1))
performance(pred,"auc")@y.values[[1]] # AUC = 0,9651
#auc(valid$Cible,valid$logit) # avec package pROC

# courbe ROC
perf <- performance(pred,"tpr","fpr")
plot(perf,main='Courbe ROC')
segments(0,0,1,1,lty=3) # ajout diagonale en pointillés 
# courbe de lift
lift <- performance(pred,"lift","rpp")
plot(lift,main='Courbe de lift')
# courbe de lift usuelle
lift <- performance(pred,"tpr","rpp")
plot(lift,main='Courbe de lift')
segments(0,0,prop.table(table(data2$class))[2],1,lty=3) # ajout diagonale en pointillés gris
segments(prop.table(table(data2$class))[2],1,1,1,lty=3) # ajout diagonale en pointillés gris

# courbe ROC avec intervalles de confiance
library(pROC)
roc <- plot.roc(valid$class,valid$logit,main="", percent=TRUE, ci=TRUE)
# calcul des intervalles de confiance par simulation de Monte-Carlo
roc.se <- ci.se(roc,specificities=seq(0, 100, 5))
plot(roc.se, type="shape", col="grey")

# superposition des fonctions de répartition des bons et mauvais dossiers
plot.ecdf((valid$logit[valid$class==0]),main="Fonction de répartition du score",col="blue",pch=16)
plot.ecdf((valid$logit[valid$class==1]),col="red",pch=17,add=T)
legend("bottomright",c("Score=0","Score=1"),pch=c(16,17),col=c("blue","red"),lwd=1)

# Kolmogorov-Smirnov
perf <- performance(pred,"tpr", "fpr")
max(perf@y.values[[1]]-perf@x.values[[1]])
ks <- perf@y.values[[1]]-perf@x.values[[1]]
(seuil <- pred@cutoffs[[1]][which.max(ks)])
segments(seuil,1-perf@y.values[[1]][which.max(ks)],seuil,1-perf@x.values[[1]][which.max(ks)],col='black',lty=3)

# superposition des fonctions de densité des bons et mauvais dossiers
plot(density(valid$logit[valid$class==0]),main="Fonction de densité du score",col="blue",
     xlim = c(-0.2,1.1), ylim = c(0,15),lwd=2)
par(new = TRUE)
plot(density(valid$logit[valid$class==1]),col="red",lty=3,lwd=2,
     xlim = c(-0.2,1.1), ylim = c(0,15),xlab = '', ylab = '',main=' ')
legend("topright",c("Score=0","Score=1"),
       lty=c(1,3),col=c("blue","red"),lwd=2)
abline(v=seuil,col="grey")

# box-plot
plot(logit~class,data=valid,horizontal = TRUE)

# application du modèle à l'ensemble des données
data2$logit <- predict(logit, newdata=data2, type="response")
pred <- prediction(data2$logit,data2$class,label.ordering=c(0,1))
performance(pred,"auc")@y.values[[1]] # AUC = 0,96859
